name: Build and Security Scan

on:
  push:
    branches:
    - main
    - '!master'
  pull_request:
    branches:
    - main
    - '!master'

permissions:
  contents: write
  
jobs:
  sonarqube:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        # Disabling shallow clones is recommended for improving the relevancy of reporting
        fetch-depth: 0
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      with:
        pollingTimeoutSec: 600
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}


  checkout_and_build:
    needs: [sonarqube]
    runs-on: ubuntu-latest
    outputs:
      build_tag: ${{steps.latest_tag.outputs.tag}}
    steps:
      - name: repo checkout
        uses: actions/checkout@v4
        with:
         fetch-tags: true
         fetch-depth: 0
      - name: list files
        run: |
          ls -al
      - name: Set up Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      - name: get latest tag
        id: latest_tag
        run: |
          latest_tag=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
          echo "Latest tag: $latest_tag"

          if [ -z "$latest_tag" ]; then
            new_version="v0.0.1"
          else
            version=${latest_tag#v}
            IFS='.' read -r major minor patch <<< "$version"
            patch=$((patch + 1))
            new_version="v$major.$minor.$patch"
          fi

          echo "New tag: $new_version"
          echo "tag=$new_version" >> $GITHUB_OUTPUT

          git tag "$new_version"
          git push origin "$new_version"
      - name: Code Obfuscation
        run: |
          pip install package-obfuscator
          package-obfuscate .
      - name: View code after Obfuscation
        run: cat main.py
      - name: docker build
        run: |
          docker build -t fast-trial:${{steps.latest_tag.outputs.tag}} .
          docker image ls
      - name: install dependecies
        run: |
          pip3 install -r requirements.txt
      - name: Snyk Image Vulnerability scan
        uses: snyk/actions/node@master
        env: # Omitted `continue-on-error: true` to fail the pipeline in case of an error
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=requirements.txt --command=python3

      # - name: docker push to ACR
      #   uses: azure/docker-login@v1
      #   with:
      #     login-server: ${{ secrets.AZURE_URL }}
      #     username: ${{ secrets.ACR_USERNAME }}
      #     password: ${{ secrets.ACR_PASSWORD }}
  


